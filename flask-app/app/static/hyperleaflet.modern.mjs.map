{"version":3,"file":"hyperleaflet.modern.mjs","sources":["../../../src/constants.js","../../../src/hyperleaflet.js"],"sourcesContent":["import L from \"leaflet\";\r\n\r\nconst TILE_LAYERS = {\r\n    OpenStreetMap: L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\r\n    }),\r\n    EsriWorldImagery: L.tileLayer(\r\n        \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\r\n        {\r\n            attribution:\r\n                \"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\",\r\n        }\r\n    ),\r\n};\r\n\r\nexport default TILE_LAYERS","import L from \"leaflet\";\nimport { defineExtension, remove } from 'htmx.org';\nimport TILE_LAYERS from \"./constants\"\n\nconst hyperleaflet = (function hyperleaflet() {\n    if (typeof L === \"undefined\") {\n        console.error(\"Can't access Leaflet\");\n        return undefined;\n    }\n\n\n\n    const mapDiv = document.querySelector(\"#map\");\n    const tileLayerDivs = mapDiv.querySelectorAll(\"[data-tile]\");\n\n    const initalMapAttributes = {\n        center: [0, 0],\n        zoom: 1,\n        tile: TILE_LAYERS.OpenStreetMap,\n    };\n\n    const { dataset } = mapDiv\n\n    const center = dataset?.center.split(\",\") || initalMapAttributes.center.center;\n    const zoom = dataset?.zoom || initalMapAttributes.zoom;\n    let { tile } = initalMapAttributes\n\n    const tiles = {};\n\n\n    tileLayerDivs.forEach((tileLayer) => {\n        const { dataset: tileLayerDataset } = tileLayer\n        const tileLayerName = tileLayerDataset.tile;\n        if (tileLayerName in TILE_LAYERS) {\n            const tempTile = TILE_LAYERS[tileLayerName];\n            tempTile.options.minZoom = tileLayerDataset.minZoom;\n            tempTile.options.maxZoom = tileLayerDataset.maxZoom;\n            tiles[tileLayerName] = tempTile;\n            if (\"default\" in tileLayerDataset) {\n                tile = tempTile;\n            }\n        } else {\n            console.warn(`${tileLayerName} is not in: \\n${Object.keys(TILE_LAYERS).join(\"\\n\")}`);\n        }\n    });\n\n    const map = L.map(mapDiv).setView(center, zoom);\n\n    if (Object.keys(tiles).length) {\n        L.control.layers(tiles).addTo(map);\n    }\n    tile.addTo(map);\n\n\n\n\n    const leafletObjects = {}\n    const proxy = new Proxy(leafletObjects, {\n        set(target, property, value) {\n            const point = L.marker(value.split(\",\")).addTo(map)\n            target[property] = point;\n            return true;\n        },\n        deleteProperty(target, property) {\n            target[property].remove()\n            delete target[property]\n            return true;\n        }\n    });\n\n    const diff = (original, news) => {\n        const originalList = Object.keys(original)\n        const newsList = Object.keys(news)\n        \n        const adds = newsList.filter(item => !originalList.includes(item))\n        const deletes = originalList.filter(item => !newsList.includes(item))\n\n        return { adds, deletes }\n    }\n\n    const toLeaflet = (target) => {\n        const rowNodeList = target.querySelectorAll(\"[data-id]\")\n        const rowList = Array.from(rowNodeList)\n        const rowsObj = rowList.reduce((curr, next) => ({ ...curr, [next.dataset.id]: next.dataset.latlng }), {})\n        const difference = diff(leafletObjects, rowsObj)\n        difference.adds.forEach(row => { proxy[row] = rowsObj[row] })\n        difference.deletes.forEach(row => { delete proxy[row] })\n\n    }\n\n\n    defineExtension('leaflet', {\n        onEvent: (name) => {\n            if (['htmx:afterProcessNode', 'htmx:afterOnLoad'].includes(name)) {\n                const hyperleafTable = document.querySelector('[hx-ext=leaflet]')\n                toLeaflet(hyperleafTable)\n            }\n        }\n    })\n\n    return { map };\n})();\n\nexport default hyperleaflet;\n"],"names":["TILE_LAYERS","OpenStreetMap","L","tileLayer","attribution","EsriWorldImagery","hyperleaflet","console","error","document","querySelector","mapDiv","querySelectorAll","initalMapAttributes","center","zoom","tile","dataset","split","tiles","tileLayerDivs","forEach","tileLayerDataset","tileLayerName","tempTile","options","minZoom","maxZoom","warn","Object","keys","join","map","setView","length","control","layers","addTo","leafletObjects","proxy","Proxy","set","target","property","value","point","marker","deleteProperty","remove","defineExtension","onEvent","name","includes","rowNodeList","rowsObj","Array","from","reduce","curr","next","id","latlng","difference","original","news","originalList","newsList","adds","filter","item","deletes","diff","row","toLeaflet"],"mappings":"sSAEA,MAAMA,EAAc,CAChBC,cAAeC,EAAEC,UAAU,iDAAkD,CACzEC,YAAa,8EAEjBC,iBAAkBH,EAAEC,UAChB,gGACA,CACIC,YACI,mJCNVE,EAAgB,WAClB,QAAiB,IAALJ,EAER,YADAK,QAAQC,MAAM,wBAMlB,QAAeC,SAASC,cAAc,UAChBC,EAAOC,iBAAiB,eAErBC,EAAG,CACxBC,OAAQ,CAAC,EAAG,GACZC,KAAM,EACNC,KAAMhB,EAAYC,gBAGhBgB,QAAEA,GAAYN,EAEdG,GAAgB,MAAPG,OAAO,EAAPA,EAASH,OAAOI,MAAM,OAAQL,EAAoBC,OAAOA,OAClEC,GAAc,MAAPE,OAAO,EAAPA,EAASF,OAAQF,EAAoBE,KAClD,IAAIC,KAAEA,GAASH,EAEf,MAAMM,EAAQ,CAAA,EAGdC,EAAcC,QAASlB,IACnB,MAAQc,QAASK,GAAqBnB,IAChBmB,EAAiBN,KACvC,GAAIO,OAA8B,CAC9B,MAAMC,EAAWxB,EAAYuB,GAC7BC,EAASC,QAAQC,QAAUJ,EAAiBI,QAC5CF,EAASC,QAAQE,QAAUL,EAAiBK,QAC5CR,EAAMI,GAAiBC,EACnB,YAA6BF,IAC7BN,EAAOQ,EAEf,MACIjB,QAAQqB,KAAM,GAAEL,kBAA8BM,OAAOC,KAAK9B,GAAa+B,KAAK,QAChF,GAGJ,QAAY7B,EAAE8B,IAAIrB,GAAQsB,QAAQnB,EAAQC,GAEtCc,OAAOC,KAAKX,GAAOe,QACnBhC,EAAEiC,QAAQC,OAAOjB,GAAOkB,MAAML,GAElChB,EAAKqB,MAAML,GAKX,MAAMM,EAAiB,CAAA,EACZC,EAAG,IAASC,MAACF,EAAgB,CACpCG,IAAIC,EAAQC,EAAUC,GAClB,MAAWC,EAAG3C,EAAE4C,OAAOF,EAAM1B,MAAM,MAAMmB,MAAML,GAE/C,OADAU,EAAOC,GAAYE,GACZ,CACX,EACAE,eAAc,CAACL,EAAQC,KACnBD,EAAOC,GAAUK,gBACVN,EAAOC,IAElB,KAiCJ,OATAM,EAAgB,UAAW,CACvBC,QAAUC,IACF,CAAC,wBAAyB,oBAAoBC,SAASD,IAbhDT,KACf,MAAMW,EAayB5C,SAASC,cAAc,oBAb3BE,iBAAiB,aAEtC0C,EADUC,MAAMC,KAAKH,GACHI,OAAO,CAACC,EAAMC,SAAeD,EAAI,CAAE,CAACC,EAAK1C,QAAQ2C,IAAKD,EAAK1C,QAAQ4C,SAAW,CAAA,GACtFC,EAdP,EAACC,EAAUC,KACpB,MAAMC,EAAepC,OAAOC,KAAKiC,GAC3BG,EAAWrC,OAAOC,KAAKkC,GAK7B,MAAO,CAAEG,KAHID,EAASE,OAAOC,IAASJ,EAAab,SAASiB,IAG7CC,QAFCL,EAAaG,OAAOC,IAASH,EAASd,SAASiB,IAExC,EAOJE,CAAKjC,EAAgBgB,GACxCQ,EAAWK,KAAK9C,QAAQmD,IAASjC,EAAMiC,GAAOlB,EAAQkB,EAAG,GACzDV,EAAWQ,QAAQjD,QAAQmD,aAAsBA,EAAK,IAS9CC,EACJ,IAID,CAAEzC,MACb,CAjGsB"}