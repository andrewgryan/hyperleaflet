{"version":3,"file":"hyperleaflet.umd.js","sources":["../../../src/Events.js","../../../src/Constants.js","../../../src/hyperleaflet.js","../../../src/Map.js","../../../src/HyperleafletHandlers.js","../../../src/Geometry.js","../../../src/GeometryDebug.js"],"sourcesContent":["export default function initMapEvents(map) {\n  map.on('click', (e) => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('mapclick', { detail: { point: e.latlng } });\n    elem.dispatchEvent(event);\n  });\n\n  map.on('zoomend', () => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('mapzoom', { detail: { zoom: map.getZoom() } });\n    elem.dispatchEvent(event);\n  });\n\n  map.on('move', () => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('mapmove', { detail: { bbox: map.getBounds(), center: map.getCenter() } });\n    elem.dispatchEvent(event);\n  });\n}\n\nexport function setGeometryEvents(geometry, id) {\n  geometry.on('click', (e) => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('pointclick', { detail: { point: e.latlng, rowId: id } });\n    elem.dispatchEvent(event);\n  });\n}","import L from 'leaflet';\n\nconst TILE_LAYERS = {\n  OpenStreetMap: L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n  }),\n  EsriWorldImagery: L.tileLayer(\n    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n    {\n      attribution:\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n    },\n  ),\n};\n\nexport default TILE_LAYERS;\n","import L from 'leaflet';\nimport LeafletWrapper from './HyperleafletHandlers';\nimport createLeafletMap from './Map';\n\nconst hyperleaflet = (function hyperleaflet() {\n  if (typeof L === 'undefined') {\n    // eslint-disable-next-line no-console\n    console.error('Hyperleaf can not access Leaflet');\n    return undefined;\n  }\n\n  const map = createLeafletMap();\n  const hyperleafletContainer = document.querySelector('[hyperleaflet]');\n  const geometryStrategy = \"inline\" \n\n  const { hyperleafletInteraction } = LeafletWrapper(map);\n  const { addNoteListToHyperleaflet, removeNodeListToHyperleaflet } = hyperleafletInteraction(geometryStrategy);\n\n  // TODO implement strategy\n  \n  map.whenReady(() => {\n    const nodes = hyperleafletContainer.querySelectorAll('[data-id]')\n    addNoteListToHyperleaflet(nodes)\n  });\n\n  function callback(mutations) {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        addNoteListToHyperleaflet(mutation.addedNodes)\n        removeNodeListToHyperleaflet(mutation.removedNodes)\n      }\n    });\n  }\n\n  const observer = new MutationObserver(callback);\n\n  observer.observe(hyperleafletContainer, {\n    childList: true, // observe direct children\n    subtree: true, // and lower descendants too\n    attributeFilter: ['data-id'],\n  });\n\n  const addGeoJsonToMap = (geoJson) => {\n    L.geoJSON(geoJson).addTo(map);\n  };\n\n  return { map, addGeoJsonToMap };\n})();\n\nexport default hyperleaflet;\n","import L from 'leaflet';\nimport TILE_LAYERS from './Constants';\nimport initEvents from './Events';\n\nconst createLeafletMap = () => {\n  const mapDiv = document.querySelector('#map');\n  const tileLayerDivs = mapDiv.querySelectorAll('[data-tile]');\n\n  const { dataset } = mapDiv;\n\n  const mapAttr = {\n    center: dataset?.center.split(',') || [0, 0],\n    zoom: dataset?.zoom || 1,\n    tile: TILE_LAYERS.OpenStreetMap,\n    tiles: {},\n  };\n\n  tileLayerDivs.forEach((tileLayer) => {\n    const { dataset: tileLayerDataset } = tileLayer;\n    const tileLayerName = tileLayerDataset.tile;\n\n    if (tileLayerName in TILE_LAYERS) {\n      const currentTile = TILE_LAYERS[tileLayerName];\n      currentTile.options.minZoom = tileLayerDataset.minZoom;\n      currentTile.options.maxZoom = tileLayerDataset.maxZoom;\n      mapAttr.tiles[tileLayerName] = currentTile;\n\n      if ('default' in tileLayerDataset) {\n        mapAttr.tile = currentTile;\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.error(`${tileLayerName} is not in: \\n${Object.keys(TILE_LAYERS).join('\\n')}`);\n    }\n  });\n\n  const map = L.map(mapDiv).setView(mapAttr.center, mapAttr.zoom);\n\n  if (Object.keys(mapAttr.tiles).length) {\n    L.control.layers(mapAttr.tiles).addTo(map);\n  }\n\n  initEvents(map);\n\n  mapAttr.tile.addTo(map);\n  return map;\n};\n\nexport default createLeafletMap;\n","import createLeafletObject from './Geometry';\nimport createGeometryDebugObject from './GeometryDebug';\n\nexport default function Hyperleaflet(map) {\n  const leafletObjects = {};\n\n  const proxy = new Proxy(leafletObjects, {\n    set(target, id, row) {\n      if (id in target) {\n        // eslint-disable-next-line no-console\n        console.error(`${id} already exists`);\n        return false;\n      }\n\n      const leafletObject = createLeafletObject(row);\n\n      if (leafletObject) {\n        leafletObject.addTo(map);\n        target[id] = leafletObject;\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(`Geometry with ${id} can not be created`);\n      }\n      return true;\n    },\n    deleteProperty(target, id) {\n      target[id].remove();\n      delete target[id];\n      return true;\n    },\n  });\n\n  function addNodeToHyperleaflet(node) {\n    const { dataset: data } = node;\n    const rowId = data.id;\n    proxy[rowId] = { ...data };\n    return [rowId, data.geometry, data.geometryType];\n  }\n  function deleteNodeFromHyperleaflet(node) {\n    const rowId = node.dataset.id;\n    delete proxy[rowId];\n    return rowId;\n  }\n\n  const { addToDebugObject, deleteFromDebugObject, saveDebugObject } = createGeometryDebugObject();\n\n  const makeAddNoteListToHyperleaflet = (geometryStrategy) => (nodes) =>  {\n    nodes.forEach((node) => {\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\n        const [rowId, geometry, geometryType] = addNodeToHyperleaflet(node);\n        if (rowId) {\n          if ([\"none\", \"object\"].includes(geometryStrategy)) {\n            node.removeAttribute(\"data-geometry\")\n            if(geometryStrategy === \"object\" ) {\n              addToDebugObject(rowId, geometry, geometryType);\n            }\n          }\n        }\n      }\n    });\n    saveDebugObject()\n  }\n\n  const makeRemoveNodeListToHyperleaflet = (geometryStrategy) => (nodes) => {\n    nodes.forEach((node) => {\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\n        const rowId = deleteNodeFromHyperleaflet(node);\n        if ([\"none\", \"object\"].includes(geometryStrategy)) {\n          deleteFromDebugObject(rowId);\n        }\n      }\n    });\n    saveDebugObject()\n  }\n\n  function hyperleafletInteraction(geometryStrategy) {\n    const addNoteListToHyperleaflet = makeAddNoteListToHyperleaflet(geometryStrategy);\n    const removeNodeListToHyperleaflet = makeRemoveNodeListToHyperleaflet(geometryStrategy);\n    return {addNoteListToHyperleaflet, removeNodeListToHyperleaflet}\n  }\n\n  return { hyperleafletInteraction };\n}\n","import L from 'leaflet';\nimport { setGeometryEvents } from './Events';\n\nexport default function createLeafletObject(row) {\n  const { geometry, popup, tooltip, geometryType, id } = row;\n  const parsedGeometry = JSON.parse(geometry);\n\n  switch (geometryType) {\n    case 'Point': {\n      const marker = L.marker(parsedGeometry);\n      if (popup) {\n        marker.bindPopup(popup);\n      }\n      if (tooltip) {\n        marker.bindTooltip(tooltip);\n      }\n      setGeometryEvents(marker, id);\n      return marker;\n    }\n    case 'LineString': {\n      const flippedGeometry = L.GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n      const line = L.polyline(flippedGeometry);\n      if (popup) {\n        line.bindPopup(popup);\n      }\n      if (tooltip) {\n        line.bindTooltip(tooltip);\n      }\n      setGeometryEvents(line, id);\n      return line;\n    }\n    case 'Polygon': {\n      const flippedGeometry = L.GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n      const polygon = L.polygon(flippedGeometry);\n      if (popup) {\n        polygon.bindPopup(popup);\n      }\n      if (tooltip) {\n        polygon.bindTooltip(tooltip);\n      }\n      setGeometryEvents(polygon, id);\n      return polygon;\n    }\n    default: {\n      // eslint-disable-next-line no-console\n      console.warn(`${geometryType} is not supported`);\n      return null;\n    }\n  }\n}\n","// TODO implement strategy\nexport default function createGeometryDebugObject() {\n  const debugMode = document.createElement('script');\n  debugMode.type = 'application/json';\n  debugMode.innerText = '{}';\n  document.body.appendChild(debugMode);\n  const debugObject = JSON.parse(debugMode.text);\n  \n  function addToDebugObject(rowId, geometry, geometryType) {\n    debugObject[rowId] = { type: geometryType, coordinates: JSON.parse(geometry) };\n    debugMode.text = JSON.stringify(debugObject, null, 2);\n  }\n\n  function deleteFromDebugObject(rowId) {\n    delete debugObject[rowId];\n    debugMode.text = JSON.stringify(debugObject, null, 2);\n  }\n  function saveDebugObject() {\n    debugMode.text = JSON.stringify(debugObject, null, 2);\n  }\n  return { addToDebugObject, deleteFromDebugObject, saveDebugObject };\n}\n"],"names":["setGeometryEvents","geometry","id","on","e","document","getElementById","event","CustomEvent","detail","point","latlng","rowId","elem","dispatchEvent","TILE_LAYERS","OpenStreetMap","L","tileLayer","attribution","EsriWorldImagery","map","mapDiv","querySelector","tileLayerDivs","querySelectorAll","dataset","mapAttr","center","split","zoom","tile","tiles","forEach","tileLayerDataset","tileLayerName","currentTile","options","minZoom","maxZoom","console","error","Object","keys","join","setView","length","control","layers","addTo","getZoom","bbox","getBounds","getCenter","initEvents","createLeafletMap","_hyperleafletInteract","hyperleafletInteraction","set","target","row","leafletObject","popup","tooltip","geometryType","parsedGeometry","JSON","parse","marker","bindPopup","bindTooltip","flippedGeometry","GeoJSON","coordsToLatLngs","line","polyline","_flippedGeometry","polygon","warn","createLeafletObject","deleteProperty","remove","_createGeometryDebugO","createGeometryDebugObject","debugMode","createElement","type","innerText","body","appendChild","debugObject","text","addToDebugObject","coordinates","stringify","deleteFromDebugObject","saveDebugObject","makeAddNoteListToHyperleaflet","geometryStrategy","nodes","node","nodeType","matches","_addNodeToHyperleafle","data","proxy","_extends","addNodeToHyperleaflet","includes","removeAttribute","makeRemoveNodeListToHyperleaflet","deleteNodeFromHyperleaflet","addNoteListToHyperleaflet","removeNodeListToHyperleaflet","LeafletWrapper","whenReady","hyperleafletContainer","MutationObserver","mutations","mutation","addedNodes","removedNodes","observe","childList","subtree","attributeFilter","addGeoJsonToMap","geoJson","geoJSON"],"mappings":"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"}