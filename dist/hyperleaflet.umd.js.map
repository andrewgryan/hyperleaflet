{"version":3,"file":"hyperleaflet.umd.js","sources":["../src/constants.js","../src/events.js","../src/hyperleaflet.js","../src/leaflet_utils.js"],"sourcesContent":["import L from 'leaflet';\r\n\r\nconst TILE_LAYERS = {\r\n  OpenStreetMap: L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\r\n  }),\r\n  EsriWorldImagery: L.tileLayer(\r\n    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\r\n    {\r\n      attribution:\r\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\r\n    },\r\n  ),\r\n};\r\n\r\nexport default TILE_LAYERS;\r\n","export default function initMapEvents(map) {\r\n  map.on('click', (e) => {\r\n    const elem = document.getElementById('map');\r\n    const event = new CustomEvent('mapclick', { detail: { point: e.latlng } });\r\n    elem.dispatchEvent(event);\r\n  });\r\n\r\n  map.on('zoomend', () => {\r\n    const elem = document.getElementById('map');\r\n    const event = new CustomEvent('mapzoom', { detail: { zoom: map.getZoom() } });\r\n    elem.dispatchEvent(event);\r\n  });\r\n\r\n  map.on('move', () => {\r\n    const elem = document.getElementById('map');\r\n    const event = new CustomEvent('mapmove', { detail: { bbox: map.getBounds(), center: map.getCenter() } });\r\n    elem.dispatchEvent(event);\r\n  });\r\n}\r\n\r\nexport function setGeometryEvents(geometry, id) {\r\n  geometry.on('click', (e) => {\r\n    const elem = document.getElementById('map');\r\n    const event = new CustomEvent('pointclick', { detail: { point: e.latlng, rowId: id } });\r\n    elem.dispatchEvent(event);\r\n  });\r\n}","import L from 'leaflet';\nimport { defineExtension } from 'htmx.org';\nimport TILE_LAYERS from './constants';\nimport initEvents from './events';\nimport createLeafletObject from './leaflet_utils';\n\nconst hyperleaflet = (function hyperleaflet() {\n  if (typeof L === 'undefined') {\n    // eslint-disable-next-line no-console\n    console.error('Hyperleaf can not access Leaflet');\n    return undefined;\n  }\n\n  const debugMode = document.createElement('script');\n  debugMode.type = 'application/json';\n  debugMode.innerText = `{}`;\n  document.body.appendChild(debugMode);\n\n  const mapDiv = document.querySelector('#map');\n  const tileLayerDivs = mapDiv.querySelectorAll('[data-tile]');\n\n  const initalMapAttributes = {\n    center: [0, 0],\n    zoom: 1,\n    tile: TILE_LAYERS.OpenStreetMap,\n  };\n\n  const { dataset } = mapDiv;\n\n  const center = dataset?.center.split(',') || initalMapAttributes.center.center;\n  const zoom = dataset?.zoom || initalMapAttributes.zoom;\n  let { tile } = initalMapAttributes;\n\n  const tiles = {};\n\n  tileLayerDivs.forEach((tileLayer) => {\n    const { dataset: tileLayerDataset } = tileLayer;\n    const tileLayerName = tileLayerDataset.tile;\n    if (tileLayerName in TILE_LAYERS) {\n      const currentTile = TILE_LAYERS[tileLayerName];\n      currentTile.options.minZoom = tileLayerDataset.minZoom;\n      currentTile.options.maxZoom = tileLayerDataset.maxZoom;\n      tiles[tileLayerName] = currentTile;\n      if ('default' in tileLayerDataset) {\n        tile = currentTile;\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(`${tileLayerName} is not in: \\n${Object.keys(TILE_LAYERS).join('\\n')}`);\n    }\n  });\n\n  const map = L.map(mapDiv).setView(center, zoom);\n\n  initEvents(map);\n\n  if (Object.keys(tiles).length) {\n    L.control.layers(tiles).addTo(map);\n  }\n  tile.addTo(map);\n\n  const leafletObjects = {};\n\n  const proxy = new Proxy(leafletObjects, {\n    set(target, property, value) {\n      const geometry = createLeafletObject(value);\n      if (geometry) {\n        geometry.addTo(map)\n        target[property] = geometry;\n      } else {\n        console.warn(`Geometry with ${property} can not be created`);\n      }\n      return true;\n    },\n    deleteProperty(target, property) {\n      target[property].remove();\n      delete target[property];\n      return true;\n    },\n  });\n\n  const getDifference = (original, current) => {\n    const originalList = Object.keys(original);\n    const newsList = Object.keys(current);\n\n    const adds = newsList.filter((item) => !originalList.includes(item));\n    const deletes = originalList.filter((item) => !newsList.includes(item));\n\n    return { adds, deletes };\n  };\n\n  const processHyperleafTable = (target) => {\n    const debugData = JSON.parse(debugMode.text);\n    const rowNodeList = target.querySelectorAll('[data-id]');\n    const rowList = Array.from(rowNodeList);\n    const currentObjects = rowList.reduce(\n      (curr, next) => ({ ...curr, [next.dataset.id]: { ...next.dataset } }),\n      {},\n    );\n\n    const difference = getDifference(leafletObjects, currentObjects);\n    difference.adds.forEach((row) => {\n      debugData[row] = JSON.parse(currentObjects[row].geometry);\n      proxy[row] = currentObjects[row];\n    });\n    difference.deletes.forEach((row) => {\n      delete debugData[row];\n      delete proxy[row];\n    });\n    rowNodeList.forEach((row) => {\n      row.removeAttribute('data-geometry');\n    });\n    debugMode.text = JSON.stringify(debugData, null, 2);\n  };\n\n  defineExtension('leaflet', {\n    onEvent: (name) => {\n      if (['htmx:afterProcessNode', 'htmx:afterOnLoad'].includes(name)) {\n        const hyperleafTable = document.querySelector('[hx-ext=leaflet]');\n        processHyperleafTable(hyperleafTable);\n      }\n    },\n  });\n\n  function callback(mutations) {\n    console.log(mutations);\n  }\n\n  const observer = new MutationObserver(callback);\n\n  observer.observe(document.querySelector('[hx-ext=leaflet]'), {\n    childList: true, // observe direct children\n    subtree: true, // and lower descendants too\n    characterDataOldValue: true // pass old data to callback\n  });\n\n  return { map };\n})();\n\nexport default hyperleaflet;\n","import L from 'leaflet';\r\nimport { setGeometryEvents } from './events';\r\n\r\nexport default function createLeafletObject(row) {\r\n  const { geometry, popup, geometryType, id } = row;\r\n  const parsedGeometry = JSON.parse(geometry);\r\n  switch (geometryType) {\r\n    case 'Point': {\r\n      const marker = L.marker(parsedGeometry);\r\n      if (popup) {\r\n        marker.bindPopup(popup);\r\n      }\r\n      setGeometryEvents(marker, id);\r\n      return marker;\r\n    }\r\n    case 'LineString': {\r\n      const flippedGeometry = L.GeoJSON.coordsToLatLngs(parsedGeometry, 1);\r\n      const line = L.polyline(flippedGeometry);\r\n      if (popup) {\r\n        line.bindPopup(popup);\r\n      }\r\n      setGeometryEvents(line, id);\r\n      return line;\r\n    }\r\n    case 'Polygon': {\r\n      console.log(parsedGeometry);\r\n      const flippedGeometry = L.GeoJSON.coordsToLatLngs(parsedGeometry, 1);\r\n      console.log(flippedGeometry);\r\n      const polygon = L.polygon(flippedGeometry);\r\n      if (popup) {\r\n        polygon.bindPopup(popup);\r\n      }\r\n      setGeometryEvents(polygon, id);\r\n      return polygon;\r\n    }\r\n    default: {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(`${geometryType} is not supported`);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n"],"names":["TILE_LAYERS","OpenStreetMap","L","tileLayer","attribution","EsriWorldImagery","setGeometryEvents","geometry","id","on","e","document","getElementById","event","CustomEvent","detail","point","latlng","rowId","elem","dispatchEvent","createElement","debugMode","type","innerText","body","appendChild","querySelector","tileLayerDivs","mapDiv","querySelectorAll","initalMapAttributes","center","zoom","tile","dataset","split","forEach","tileLayerDataset","tileLayerName","currentTile","options","minZoom","maxZoom","tiles","console","warn","Object","keys","join","map","setView","getZoom","bbox","getBounds","getCenter","initEvents","length","control","layers","addTo","proxy","Proxy","leafletObjects","set","target","property","value","row","popup","geometryType","parsedGeometry","JSON","parse","marker","bindPopup","flippedGeometry","GeoJSON","coordsToLatLngs","line","polyline","log","polygon","createLeafletObject","deleteProperty","remove","defineExtension","onEvent","name","current","newsList","currentObjects","includes","text","Array","from","rowNodeList","reduce","curr","next","_extends2","_extends","adds","filter","item","originalList","deletes","debugData","difference","removeAttribute","stringify","mutations","observe","childList","subtree","characterDataOldValue","error"],"mappings":"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"}