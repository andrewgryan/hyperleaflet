{"version":3,"file":"hyperleaflet.umd.js","sources":["../src/events.js","../src/leaflet-geometry.js","../src/hyperleaflet-geometry-handler.js","../src/constants.js","../src/geometry-debugger.js","../src/remove-geometry-attribute.js","../src/hyperleaflet.js","../src/map-utils.js"],"sourcesContent":["export default function setMapEvents(map) {\n  map.on('click', (e) => {\n    const event = new CustomEvent('mapclick', { detail: { point: e.latlng } });\n    window.dispatchEvent(event);\n  });\n\n  map.on('zoomend', () => {\n    const event = new CustomEvent('mapzoom', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: map.getBounds() },\n    });\n    window.dispatchEvent(event);\n  });\n\n  map.on('move', () => {\n    const event = new CustomEvent('mapmove', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: map.getBounds() },\n    });\n    window.dispatchEvent(event);\n  });\n\n  return map;\n}\n\nexport function setGeometryEvents(leafletObject, id) {\n  leafletObject.on('click', () => {\n    const event = new CustomEvent('pointclick', { detail: { point: leafletObject.getLatLng(), rowId: id } });\n    window.dispatchEvent(event);\n  });\n}\n","import { marker, polyline, polygon, GeoJSON } from 'leaflet';\nimport { setGeometryEvents } from './events';\n\nconst createPointGeometry = (parsedGeometry, options) => {\n  const point = marker(parsedGeometry);\n  if (options.popup) {\n    point.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    point.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(point, options.id);\n  return point;\n};\n\nconst createLineGeometry = (parsedGeometry, options) => {\n  const flippedGeometry = GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n  const line = polyline(flippedGeometry);\n  if (options.popup) {\n    line.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    line.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(line, options.id);\n  return line;\n};\n\nconst createPolygonGeometry = (parsedGeometry, options) => {\n  const flippedGeometry = GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n  const _polygon = polygon(flippedGeometry);\n  if (options.popup) {\n    _polygon.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    _polygon.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(_polygon, options.id);\n  return _polygon;\n};\n\nconst createGeometry = (geometryType) => (parsedGeometry, options) => {\n  switch (geometryType) {\n    case 'Point':\n      return createPointGeometry(parsedGeometry, options);\n    case 'LineString':\n      return createLineGeometry(parsedGeometry, options);\n    case 'Polygon':\n      return createPolygonGeometry(parsedGeometry, options);\n    default:\n      // eslint-disable-next-line no-console\n      console.warn(`${geometryType} is not supported`);\n      return null;\n  }\n};\n\nexport default function createLeafletObject(row) {\n  const { geometry, popup, tooltip, geometryType, id } = row;\n  const parsedGeometry = JSON.parse(geometry);\n\n  const createGeometryFn = createGeometry(geometryType);\n  return createGeometryFn(parsedGeometry, { popup, tooltip, id });\n}\n","import createLeafletObject from './leaflet-geometry';\n\nconst leafletObjectMap = new Map();\n\nfunction addNodeToHyperleaflet(node) {\n  const { dataset } = node;\n  const rowId = dataset.id;\n\n  if (rowId in leafletObjectMap) {\n    // eslint-disable-next-line no-console\n    console.error(`%c${rowId}`, 'color:red', 'already exists', node);\n    return [];\n  }\n\n  const leafletObject = createLeafletObject({ ...dataset });\n  leafletObjectMap.set(rowId, leafletObject);\n\n  return [leafletObject];\n}\n\nfunction deleteNodeFromHyperleaflet(node) {\n  const rowId = node.dataset.id;\n  const leafletObject = leafletObjectMap.get(rowId);\n  leafletObjectMap.delete(rowId);\n  return [leafletObject];\n}\n\nexport default function hyperleafletGeometryHandler(map, { addCallback = () => {}, removeCallback = () => {} }) {\n  const addNoteListToHyperleaflet = (nodes) => {\n    nodes.forEach((node) => {\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\n        const [leafletObject] = addNodeToHyperleaflet(node);\n        leafletObject.addTo(map);\n        addCallback(node);\n      }\n    });\n  };\n\n  function removeNodeListToHyperleaflet(nodes) {\n    nodes.forEach((node) => {\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\n        const [leafletObject] = deleteNodeFromHyperleaflet(node);\n        leafletObject.remove();\n        removeCallback(node);\n      }\n    });\n  }\n\n  return { addNoteListToHyperleaflet, removeNodeListToHyperleaflet };\n}\n","import { tileLayer } from 'leaflet';\n\nconst TILE_LAYERS = {\n  OpenStreetMap: tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n  }),\n  EsriWorldImagery: tileLayer(\n    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n    {\n      attribution:\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n    },\n  ),\n};\n\nexport default TILE_LAYERS;\n","const debugMode = document.createElement('script');\ndebugMode.type = 'application/json';\ndebugMode.setAttribute('data-testid', 'debug');\ndebugMode.innerText = '{}';\ndocument.body.appendChild(debugMode);\n\nconst debugObject = JSON.parse(debugMode.text);\nexport function addToDebug(node) {\n  const { id, geometry, geometryType } = node.dataset;\n  node.removeAttribute('data-geometry');\n  debugObject[id] = { type: geometryType, coordinates: JSON.parse(geometry) };\n  debugMode.text = JSON.stringify(debugObject, null, 2);\n}\n\nexport function deleteFromDebug(node) {\n  const { id } = node.dataset;\n  delete debugObject[id];\n  debugMode.text = JSON.stringify(debugObject, null, 2);\n}\n","export default function removeGeometryAttribute(node) {\n  node.removeAttribute('data-geometry');\n}\n","import { geoJSON } from 'leaflet';\nimport hyperleafletGeometryHandler from './hyperleaflet-geometry-handler';\nimport createHyperleafletMap, { createHyperleafletTiles } from './map-utils';\nimport { addToDebug, deleteFromDebug } from './geometry-debugger';\nimport removeGeometryAttributes from './remove-geometry-attribute';\n\nconst hyperleaflet = (function hyperleaflet() {\n  // if (typeof L === 'undefined') {\n  //   // eslint-disable-next-line no-console\n  //   console.error('Hyperleaflet can not access Leaflet');\n  //   return undefined;\n  // }\n\n  const mapContainer = document.querySelector('#map');\n  const map = createHyperleafletMap(mapContainer);\n  const hyperleafletDataContainer = document.querySelector('[hyperleaflet]');\n\n  const tileLayerElementList = mapContainer.querySelectorAll('[data-tile]');\n  const { defaultHyperleafletTile, tileController } = createHyperleafletTiles(tileLayerElementList);\n\n  if (tileController) {\n    tileController.addTo(map);\n  }\n  defaultHyperleafletTile.addTo(map);\n\n  const geometryDisplayStrategy = hyperleafletDataContainer.dataset.geometryDisplay || 'object';\n\n  let callbackFunctions = {};\n  if (geometryDisplayStrategy === 'object') {\n    callbackFunctions = {\n      addCallback: addToDebug,\n      removeCallback: deleteFromDebug,\n    };\n  } else if (geometryDisplayStrategy === 'remove') {\n    callbackFunctions = {\n      addCallback: removeGeometryAttributes,\n      removeCallback: () => {},\n    };\n  }\n\n  const { addNoteListToHyperleaflet, removeNodeListToHyperleaflet } = hyperleafletGeometryHandler(\n    map,\n    callbackFunctions,\n  );\n\n  map.whenReady(() => {\n    const nodes = hyperleafletDataContainer.querySelectorAll('[data-id]');\n    addNoteListToHyperleaflet(nodes);\n  });\n\n  function callback(mutations) {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        addNoteListToHyperleaflet(mutation.addedNodes);\n        removeNodeListToHyperleaflet(mutation.removedNodes);\n      }\n    });\n  }\n\n  const observer = new MutationObserver(callback);\n\n  observer.observe(hyperleafletDataContainer, {\n    childList: true, // observe direct children\n    subtree: true, // and lower descendants too\n    attributeFilter: ['data-id'],\n  });\n\n  const addGeoJsonToMap = (geoJson) => {\n    geoJSON(geoJson).addTo(map);\n  };\n\n  return { map, addGeoJsonToMap };\n})();\n\nexport default hyperleaflet;\n","import { map, control } from 'leaflet';\nimport TILE_LAYERS from './constants';\nimport setMapEvents from './events';\n\nexport function getDefaultHyperleafletTile(tileLayerElementList) {\n  const defaultTileLayerElement = tileLayerElementList.find((t) => 'defaultTile' in t.dataset);\n  if (defaultTileLayerElement) {\n    return TILE_LAYERS[defaultTileLayerElement.dataset.tile];\n  }\n  if (tileLayerElementList.length) {\n    return TILE_LAYERS[tileLayerElementList[0].dataset.tile];\n  }\n  return TILE_LAYERS.OpenStreetMap;\n}\n\nexport function createHyperleafletTiles(tileLayerElementNodeList) {\n  const tileLayerElementList = Array.from(tileLayerElementNodeList);\n  const hyperleafletTiles = tileLayerElementList\n    .map((tileLayerElement) => {\n      const { tile, minZoom, maxZoom } = tileLayerElement.dataset;\n\n      const currentTile = TILE_LAYERS[tile];\n      if (!currentTile) {\n        // eslint-disable-next-line no-console\n        console.warn(`${tile} is not in: \\n${Object.keys(TILE_LAYERS).join('\\n')}`);\n        return null;\n      }\n      currentTile.options.minZoom = minZoom;\n      currentTile.options.maxZoom = maxZoom;\n      currentTile.name = tile;\n      return { tile: currentTile };\n    })\n    .filter(Boolean);\n  const defaultHyperleafletTile = getDefaultHyperleafletTile(tileLayerElementList);\n  return {\n    defaultHyperleafletTile,\n    tileController: hyperleafletTiles.length\n      ? control.layers(Object.fromEntries(hyperleafletTiles.map((t) => [t.tile.name, t.tile])))\n      : null,\n  };\n}\n\nexport default function createHyperleafletMap(mapElement) {\n  const { center, zoom } = mapElement.dataset;\n\n  const mapView = {\n    center: center?.split(','),\n    zoom: zoom || 1,\n  };\n  const map_ = map(mapElement).setView(mapView.center, mapView.zoom);\n  return setMapEvents(map_);\n}\n"],"names":["leafletObject","id","on","CustomEvent","detail","point","getLatLng","rowId","window","dispatchEvent","event","leafletObjectMap","Map","OpenStreetMap","tileLayer","attribution","EsriWorldImagery","debugMode","document","createElement","type","setAttribute","innerText","body","appendChild","debugObject","JSON","parse","text","node","dataset","geometry","geometryType","_node$dataset","removeAttribute","coordinates","stringify","deleteFromDebug","removeGeometryAttribute","mapContainer","querySelector","map","mapElement","center","_mapElement$dataset","zoom","mapView","split","map_","setView","e","latlng","getZoom","getCenter","bbox","getBounds","createHyperleafletMap","hyperleafletDataContainer","createHyperleafletTiles","tileLayerElementNodeList","tileLayerElementList","Array","from","hyperleafletTiles","tileLayerElement","tile","_tileLayerElement$dat","maxZoom","currentTile","TILE_LAYERS","options","minZoom","name","console","warn","Object","keys","join","filter","Boolean","defaultHyperleafletTile","getDefaultHyperleafletTile","find","t","defaultTileLayerElement","length","tileController","control","layers","fromEntries","querySelectorAll","_createHyperleafletTi","addTo","geometryDisplayStrategy","geometryDisplay","callbackFunctions","addCallback","addToDebug","removeCallback","removeGeometryAttributes","hyperleafletGeometryHandler","_ref","_ref$addCallback","_ref$removeCallback","addNoteListToHyperleaflet","nodes","forEach","nodeType","matches","error","row","popup","tooltip","parsedGeometry","_extends","marker","bindPopup","bindTooltip","setGeometryEvents","createPointGeometry","flippedGeometry","GeoJSON","coordsToLatLngs","line","polyline","createLineGeometry","polygon","_polygon","createPolygonGeometry","createGeometry","createGeometryFn","set","addNodeToHyperleaflet","removeNodeListToHyperleaflet","deleteNodeFromHyperleaflet","get","_deleteNodeFromHyperl","remove","_hyperleafletGeometry","whenReady","MutationObserver","mutations","mutation","addedNodes","removedNodes","observe","childList","subtree","attributeFilter","addGeoJsonToMap","geoJson","geoJSON"],"mappings":"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"}