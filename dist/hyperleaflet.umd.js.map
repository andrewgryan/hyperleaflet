{"version":3,"file":"hyperleaflet.umd.js","sources":["../src/geometryStrategy.js","../src/events.js","../src/constants.js","../src/hyperleaflet.js","../src/map.js","../src/hyperleafletHandlers.js","../src/geometry.js"],"sourcesContent":["const debugMode = document.createElement('script');\ndebugMode.type = 'application/json';\ndebugMode.innerText = '{}';\ndocument.body.appendChild(debugMode);\nexport const debugObject = JSON.parse(debugMode.text);\n\n// TODO implement strategy\nexport default function GeometryStrategy() {\n  function addToDebugObject(rowId, geometry, geometryType) {\n    debugObject[rowId] = { type: geometryType, coordinates: JSON.parse(geometry) };\n    debugMode.text = JSON.stringify(debugObject, null, 2);\n  }\n\n  function deleteFromDebugObject(rowId) {\n    delete debugObject[rowId];\n    debugMode.text = JSON.stringify(debugObject, null, 2);\n  }\n  function saveDebugObject() {\n    debugMode.text = JSON.stringify(debugObject, null, 2);\n  }\n  return { addToDebugObject, deleteFromDebugObject, saveDebugObject };\n}\n","export default function initMapEvents(map) {\n  map.on('click', (e) => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('mapclick', { detail: { point: e.latlng } });\n    elem.dispatchEvent(event);\n  });\n\n  map.on('zoomend', () => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('mapzoom', { detail: { zoom: map.getZoom() } });\n    elem.dispatchEvent(event);\n  });\n\n  map.on('move', () => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('mapmove', { detail: { bbox: map.getBounds(), center: map.getCenter() } });\n    elem.dispatchEvent(event);\n  });\n}\n\nexport function setGeometryEvents(geometry, id) {\n  geometry.on('click', (e) => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('pointclick', { detail: { point: e.latlng, rowId: id } });\n    elem.dispatchEvent(event);\n  });\n}","import L from 'leaflet';\n\nconst TILE_LAYERS = {\n  OpenStreetMap: L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n  }),\n  EsriWorldImagery: L.tileLayer(\n    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n    {\n      attribution:\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n    },\n  ),\n};\n\nexport default TILE_LAYERS;\n","import L from 'leaflet';\nimport GeometryStrategy from './geometryStrategy';\nimport LeafletWrapper from './hyperleafletHandlers';\nimport createLeafletMap from './map';\n\nconst hyperleaflet = (function hyperleaflet() {\n  if (typeof L === 'undefined') {\n    // eslint-disable-next-line no-console\n    console.error('Hyperleaf can not access Leaflet');\n    return undefined;\n  }\n\n  const map = createLeafletMap();\n  const hyperleafletContainer = document.querySelector('[hyperleaflet]');\n\n  const { addNodeToHyperleaf, deleteNodeFromHyperleaflet } = LeafletWrapper(map);\n  const { addToDebugObject, deleteFromDebugObject, saveDebugObject } = GeometryStrategy();\n\n  // TODO implement strategy\n\n  map.whenReady(() => {\n    hyperleafletContainer.querySelectorAll('[data-id]').forEach((node) => {\n      const [rowId, geometry, geometryType] = addNodeToHyperleaf(node);\n      if (rowId) {\n        addToDebugObject(rowId, geometry, geometryType);\n      }\n      saveDebugObject();\n    });\n  });\n\n  function callback(mutations) {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        mutation.addedNodes.forEach((node) => {\n          if (node.nodeType === 1 && node.matches('[data-id]')) {\n            const [rowId, geometry, geometryType] = addNodeToHyperleaf(node);\n            if (rowId) {\n              addToDebugObject(rowId, geometry, geometryType);\n            }\n          }\n        });\n        mutation.removedNodes.forEach((node) => {\n          if (node.nodeType === 1 && node.matches('[data-id]')) {\n            const rowId = deleteNodeFromHyperleaflet(node);\n            deleteFromDebugObject(rowId);\n          }\n        });\n      }\n    });\n    saveDebugObject();\n  }\n\n  const observer = new MutationObserver(callback);\n\n  observer.observe(hyperleafletContainer, {\n    childList: true, // observe direct children\n    subtree: true, // and lower descendants too\n    attributeFilter: ['data-id'],\n  });\n\n  const addGeoJsonToMap = (geoJson) => {\n    L.geoJSON(geoJson).addTo(map);\n  };\n\n  return { map, addGeoJsonToMap };\n})();\n\nexport default hyperleaflet;\n","import L from 'leaflet';\nimport TILE_LAYERS from './constants';\nimport initEvents from './events';\n\nconst createLeafletMap = () => {\n  const mapDiv = document.querySelector('#map');\n  const tileLayerDivs = mapDiv.querySelectorAll('[data-tile]');\n\n  const { dataset } = mapDiv;\n\n  const mapAttr = {\n    center: dataset?.center.split(',') || [0, 0],\n    zoom: dataset?.zoom || 1,\n    tile: TILE_LAYERS.OpenStreetMap,\n    tiles: {},\n  };\n\n  tileLayerDivs.forEach((tileLayer) => {\n    const { dataset: tileLayerDataset } = tileLayer;\n    const tileLayerName = tileLayerDataset.tile;\n\n    if (tileLayerName in TILE_LAYERS) {\n      const currentTile = TILE_LAYERS[tileLayerName];\n      currentTile.options.minZoom = tileLayerDataset.minZoom;\n      currentTile.options.maxZoom = tileLayerDataset.maxZoom;\n      mapAttr.tiles[tileLayerName] = currentTile;\n\n      if ('default' in tileLayerDataset) {\n        mapAttr.tile = currentTile;\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.error(`${tileLayerName} is not in: \\n${Object.keys(TILE_LAYERS).join('\\n')}`);\n    }\n  });\n\n  const map = L.map(mapDiv).setView(mapAttr.center, mapAttr.zoom);\n\n  if (Object.keys(mapAttr.tiles).length) {\n    L.control.layers(mapAttr.tiles).addTo(map);\n  }\n\n  initEvents(map);\n\n  mapAttr.tile.addTo(map);\n  return map;\n};\n\nexport default createLeafletMap;\n","import createLeafletObject from './geometry';\n\nexport default function LeafletWrapper(map) {\n  const leafletObjects = {};\n\n  const proxy = new Proxy(leafletObjects, {\n    set(target, id, row) {\n      if (id in target) {\n        // eslint-disable-next-line no-console\n        console.error(`${id} already exists`);\n        return false;\n      }\n\n      const leafletObject = createLeafletObject(row);\n\n      if (leafletObject) {\n        leafletObject.addTo(map);\n        target[id] = leafletObject;\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(`Geometry with ${id} can not be created`);\n      }\n      return true;\n    },\n    deleteProperty(target, id) {\n      target[id].remove();\n      delete target[id];\n      return true;\n    },\n  });\n\n  function addNodeToHyperleaf(node) {\n    const { dataset: data } = node;\n    const rowId = data.id;\n    proxy[rowId] = { ...data };\n    return [rowId, data.geometry, data.geometryType];\n  }\n  function deleteNodeFromHyperleaflet(node) {\n    const rowId = node.dataset.id;\n    delete proxy[rowId];\n    return rowId;\n  }\n  return { addNodeToHyperleaf, deleteNodeFromHyperleaflet };\n}\n","import L from 'leaflet';\nimport { setGeometryEvents } from './events';\n\nexport default function createLeafletObject(row) {\n  const { geometry, popup, tooltip, geometryType, id } = row;\n  const parsedGeometry = JSON.parse(geometry);\n\n  switch (geometryType) {\n    case 'Point': {\n      const marker = L.marker(parsedGeometry);\n      if (popup) {\n        marker.bindPopup(popup);\n      }\n      if (tooltip) {\n        marker.bindTooltip(tooltip);\n      }\n      setGeometryEvents(marker, id);\n      return marker;\n    }\n    case 'LineString': {\n      const flippedGeometry = L.GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n      const line = L.polyline(flippedGeometry);\n      if (popup) {\n        line.bindPopup(popup);\n      }\n      if (tooltip) {\n        line.bindTooltip(tooltip);\n      }\n      setGeometryEvents(line, id);\n      return line;\n    }\n    case 'Polygon': {\n      const flippedGeometry = L.GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n      const polygon = L.polygon(flippedGeometry);\n      if (popup) {\n        polygon.bindPopup(popup);\n      }\n      if (tooltip) {\n        polygon.bindTooltip(tooltip);\n      }\n      setGeometryEvents(polygon, id);\n      return polygon;\n    }\n    default: {\n      // eslint-disable-next-line no-console\n      console.warn(`${geometryType} is not supported`);\n      return null;\n    }\n  }\n}\n"],"names":["debugMode","document","createElement","type","innerText","body","appendChild","debugObject","JSON","parse","text","setGeometryEvents","geometry","id","on","e","getElementById","event","CustomEvent","detail","point","latlng","rowId","elem","dispatchEvent","TILE_LAYERS","OpenStreetMap","L","tileLayer","attribution","EsriWorldImagery","map","mapDiv","querySelector","tileLayerDivs","querySelectorAll","dataset","mapAttr","center","split","zoom","tile","tiles","forEach","tileLayerDataset","tileLayerName","currentTile","options","minZoom","maxZoom","console","error","Object","keys","join","setView","length","control","layers","addTo","getZoom","bbox","getBounds","getCenter","initEvents","createLeafletMap","hyperleafletContainer","_LeafletWrapper","LeafletWrapper","proxy","Proxy","set","target","row","popup","tooltip","geometryType","parsedGeometry","marker","bindPopup","bindTooltip","flippedGeometry","GeoJSON","coordsToLatLngs","line","polyline","_flippedGeometry","polygon","warn","createLeafletObject","leafletObject","deleteProperty","remove","addNodeToHyperleaf","node","data","_extends","deleteNodeFromHyperleaflet","GeometryStrategy","addToDebugObject","coordinates","stringify","deleteFromDebugObject","saveDebugObject","_GeometryStrategy","whenReady","_addNodeToHyperleaf","mutations","mutation","addedNodes","nodeType","matches","_addNodeToHyperleaf2","removedNodes","observe","childList","subtree","attributeFilter","addGeoJsonToMap","geoJson","geoJSON"],"mappings":"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"}