{"version":3,"file":"hyperleaflet.umd.js","sources":["../src/Map/tiles.js","../src/Geometry/geometry-debugger.js","../src/Geometry/utils.js","../src/Geometry/events.js","../src/Geometry/leaflet-geometry.js","../src/hyperleaflet.js","../src/Geometry/hyperleaflet-geometry-handler.js","../src/Geometry/index.js","../src/Map/index.js","../src/Map/map-utils.js","../src/Map/events.js"],"sourcesContent":["import { tileLayer } from 'leaflet';\n\nconst TILE_LAYERS = {\n  OpenStreetMap: tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n  }),\n  EsriWorldImagery: tileLayer(\n    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n    {\n      attribution:\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n    },\n  ),\n};\n\nexport default TILE_LAYERS;\n","const debugMode = document.createElement('script');\ndebugMode.type = 'application/json';\ndebugMode.setAttribute('data-testid', 'debug');\ndebugMode.innerText = '{}';\ndocument.body.appendChild(debugMode);\n\nconst debugObject = JSON.parse(debugMode.text);\nexport function addToDebug(node) {\n  const { id, geometry, geometryType } = node.dataset;\n  node.removeAttribute('data-geometry');\n  debugObject[id] = { type: geometryType, coordinates: JSON.parse(geometry) };\n  debugMode.text = JSON.stringify(debugObject, null, 2);\n}\n\nexport function deleteFromDebug(node) {\n  const { id } = node.dataset;\n  delete debugObject[id];\n  debugMode.text = JSON.stringify(debugObject, null, 2);\n}\n","export default function utils(node) {\n  node.removeAttribute('data-geometry');\n}\n","export default function setGeometryEvents(leafletObject, id) {\n  leafletObject.on('click', () => {\n    const event = new CustomEvent('pointclick', { detail: { point: leafletObject.getLatLng(), rowId: id } });\n    window.dispatchEvent(event);\n  });\n}\n","import { marker, polyline, polygon, GeoJSON } from 'leaflet';\nimport setGeometryEvents from './events';\n\nconst createPointGeometry = (parsedGeometry, options) => {\n  const geometry = marker(parsedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createLineGeometry = (parsedGeometry, options) => {\n  const flippedGeometry = GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n  const geometry = polyline(flippedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createPolygonGeometry = (parsedGeometry, options) => {\n  const flippedGeometry = GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n  const geometry = polygon(flippedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createGeometry = (geometryType) => (parsedGeometry, options) => {\n  switch (geometryType) {\n    case 'Point':\n      return createPointGeometry(parsedGeometry, options);\n    case 'LineString':\n      return createLineGeometry(parsedGeometry, options);\n    case 'Polygon':\n      return createPolygonGeometry(parsedGeometry, options);\n    default:\n      // eslint-disable-next-line no-console\n      console.warn(`${geometryType} is not supported`);\n      return null;\n  }\n};\n\nexport default function createLeafletObject(row) {\n  const { geometry, popup, tooltip, geometryType, id } = row;\n  const parsedGeometry = JSON.parse(geometry);\n\n  const createGeometryFn = createGeometry(geometryType);\n  return createGeometryFn(parsedGeometry, { popup, tooltip, id });\n}\n","import { geoJSON as leafletGeoJSON } from 'leaflet';\n\nimport createMap from './Map';\nimport hyperleafletDataToMap from './Geometry';\n\nconst hyperleaflet = (function hyperleaflet() {\n  const map = createMap();\n  hyperleafletDataToMap(map);\n\n  // TODO - move this to a separate file\n  /**\n   Adds a GeoJSON object to the map.\n   @param {Object} geoJSON - The GeoJSON object to add to the map.\n   @returns {void}\n   */\n  const addGeoJsonToMap = (geoJSON) => {\n    leafletGeoJSON(geoJSON).addTo(map);\n  };\n\n  return { map, addGeoJsonToMap };\n})();\n\nexport default hyperleaflet;\n","import createLeafletObject from './leaflet-geometry';\n\nconst leafletObjectMap = new Map();\n\n/**\n * Creates a new leaflet object and adds it to the leaflet object map with the given row ID.\n * @param {HTMLElement} node - The HTML element containing the row ID in its dataset.\n * @returns {Array} An array containing the newly created leaflet object.\n */\nfunction addNodeToHyperleaflet(node) {\n  const { dataset } = node;\n  const rowId = dataset.id;\n\n  if (rowId in leafletObjectMap) {\n    // eslint-disable-next-line no-console\n    console.error(`%c${rowId}`, 'color:red', 'already exists', node);\n    return [];\n  }\n\n  const leafletObject = createLeafletObject({ ...dataset });\n  leafletObjectMap.set(rowId, leafletObject);\n\n  return [leafletObject];\n}\n/**\n * Removes the leaflet object associated with the given HTML element from the leaflet object map.\n * @param {HTMLElement} node - The HTML element containing the row ID in its dataset.\n * @returns {Array} An array containing the removed leaflet object.\n */\nfunction deleteNodeFromHyperleaflet(node) {\n  const rowId = node.dataset.id;\n  const leafletObject = leafletObjectMap.get(rowId);\n  leafletObjectMap.delete(rowId);\n  return [leafletObject];\n}\n\n/**\n * Initializes the hyperleaflet geometry handler with the given map and callbacks.\n * @param {Object} map - The leaflet map instance to be used.\n * @param {Object} callbacks - An object containing the add and remove callbacks to be called when elements are added or removed from the map.\n * @param {Function} callbacks.addCallback - The function to be called when an element is added to the map.\n * @param {Function} callbacks.removeCallback - The function to be called when an element is removed from the map.\n * @returns {Object} An object containing the addNoteListToHyperleaflet and removeNodeListToHyperleaflet functions.\n */\nexport default function hyperleafletGeometryHandler(map, { addCallback = () => {}, removeCallback = () => {} }) {\n  /**\n   * Adds a list of nodes to the map as Leaflet objects.\n   * @param {Array} nodes - An array of nodes to be added to the map.\n   */\n  const addNoteListToHyperleaflet = (nodes) => {\n    nodes.forEach((node) => {\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\n        const [leafletObject] = addNodeToHyperleaflet(node);\n        leafletObject.addTo(map);\n        addCallback(node);\n      }\n    });\n  };\n\n  /**\n   * Removes a list of nodes from the map.\n   * @param {Array} nodes - An array of nodes to be removed from the map.\n   */\n  function removeNodeListToHyperleaflet(nodes) {\n    nodes.forEach((node) => {\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\n        const [leafletObject] = deleteNodeFromHyperleaflet(node);\n        leafletObject.remove();\n        removeCallback(node);\n      }\n    });\n  }\n\n  return { addNoteListToHyperleaflet, removeNodeListToHyperleaflet };\n}\n","import { addToDebug, deleteFromDebug } from './geometry-debugger';\nimport removeGeometryAttributes from './utils';\nimport hyperleafletGeometryHandler from './hyperleaflet-geometry-handler';\n\n/**\n * Adds the data from the hyperleaflet container to the map.\n @param {L.Map} map\n @param map\n */\n\nfunction hyperleafletDataToMap(map) {\n  const hyperleafletDataContainer = document.querySelector('[hyperleaflet]');\n\n  if (!hyperleafletDataContainer) return;\n\n  const geometryDisplayStrategy = hyperleafletDataContainer.dataset.geometryDisplay || 'object';\n\n  let callbackFunctions = {};\n  if (geometryDisplayStrategy === 'object') {\n    callbackFunctions = {\n      addCallback: addToDebug,\n      removeCallback: deleteFromDebug,\n    };\n  } else if (geometryDisplayStrategy === 'remove') {\n    callbackFunctions = {\n      addCallback: removeGeometryAttributes,\n      removeCallback: () => {},\n    };\n  }\n\n  const { addNoteListToHyperleaflet, removeNodeListToHyperleaflet } = hyperleafletGeometryHandler(\n    map,\n    callbackFunctions,\n  );\n\n  map.whenReady(() => {\n    const nodes = hyperleafletDataContainer.querySelectorAll('[data-id]');\n    addNoteListToHyperleaflet(nodes);\n  });\n\n  function callback(mutations) {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        addNoteListToHyperleaflet(mutation.addedNodes);\n        removeNodeListToHyperleaflet(mutation.removedNodes);\n      }\n    });\n  }\n\n  const observer = new MutationObserver(callback);\n\n  observer.observe(hyperleafletDataContainer, {\n    childList: true, // observe direct children\n    subtree: true, // and lower descendants too\n    attributeFilter: ['data-id'],\n  });\n}\n\nexport default hyperleafletDataToMap;\n","import createHyperleafletMap, { createHyperleafletTiles } from './map-utils';\n\n/**\n *Creates a map\n * @returns {L.Map}\n */\nfunction createMap() {\n  const mapContainer = document.querySelector('#map');\n  const map = createHyperleafletMap(mapContainer);\n\n  const tileLayerElementList = mapContainer.querySelectorAll('[data-tile]');\n  const { defaultHyperleafletTile, tileController } = createHyperleafletTiles(tileLayerElementList);\n\n  if (tileController) {\n    tileController.addTo(map);\n  }\n  defaultHyperleafletTile.addTo(map);\n  return map;\n}\n\nexport default createMap;\n","import { map, control } from 'leaflet';\nimport TILE_LAYERS from './tiles';\nimport setMapEvents from './events';\n\nexport function getDefaultHyperleafletTile(tileLayerElementList) {\n  const defaultTileLayerElement = tileLayerElementList.find((t) => 'defaultTile' in t.dataset);\n  if (defaultTileLayerElement) {\n    return TILE_LAYERS[defaultTileLayerElement.dataset.tile];\n  }\n  if (tileLayerElementList.length) {\n    return TILE_LAYERS[tileLayerElementList[0].dataset.tile];\n  }\n  return TILE_LAYERS.OpenStreetMap;\n}\n\nexport function createHyperleafletTiles(tileLayerElementNodeList) {\n  const tileLayerElementList = Array.from(tileLayerElementNodeList);\n  const hyperleafletTiles = tileLayerElementList\n    .map((tileLayerElement) => {\n      const { tile, minZoom, maxZoom } = tileLayerElement.dataset;\n\n      const currentTile = TILE_LAYERS[tile];\n      if (!currentTile) {\n        // eslint-disable-next-line no-console\n        console.warn(`${tile} is not in: \\n${Object.keys(TILE_LAYERS).join('\\n')}`);\n        return null;\n      }\n      currentTile.options.minZoom = minZoom;\n      currentTile.options.maxZoom = maxZoom;\n      currentTile.name = tile;\n      return { tile: currentTile };\n    })\n    .filter(Boolean);\n  const defaultHyperleafletTile = getDefaultHyperleafletTile(tileLayerElementList);\n  return {\n    defaultHyperleafletTile,\n    tileController: hyperleafletTiles.length\n      ? control.layers(Object.fromEntries(hyperleafletTiles.map((t) => [t.tile.name, t.tile])))\n      : null,\n  };\n}\n\nexport default function createHyperleafletMap(mapElement) {\n  const { center, zoom } = mapElement.dataset;\n\n  const mapView = {\n    center: center?.split(',') ?? [0, 0],\n    zoom: zoom || 1,\n  };\n  const leafletMap = map(mapElement).setView(mapView.center, mapView.zoom);\n  return setMapEvents(leafletMap);\n}\n","export default function setMapEvents(map) {\n  map.on('click', (e) => {\n    const event = new CustomEvent('mapclick', { detail: { point: e.latlng } });\n    window.dispatchEvent(event);\n  });\n\n  map.on('zoomend', () => {\n    const event = new CustomEvent('mapzoom', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: map.getBounds() },\n    });\n    window.dispatchEvent(event);\n  });\n\n  map.on('move', () => {\n    const event = new CustomEvent('mapmove', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: map.getBounds() },\n    });\n    window.dispatchEvent(event);\n  });\n\n  return map;\n}\n"],"names":["OpenStreetMap","tileLayer","attribution","EsriWorldImagery","debugMode","document","createElement","type","setAttribute","innerText","body","appendChild","debugObject","JSON","parse","text","node","dataset","id","geometry","geometryType","_node$dataset","removeAttribute","coordinates","stringify","deleteFromDebug","utils","leafletObject","on","CustomEvent","detail","point","getLatLng","rowId","window","dispatchEvent","event","map","leafletObjectMap","Map","hyperleafletDataContainer","querySelector","geometryDisplayStrategy","geometryDisplay","callbackFunctions","addCallback","addToDebug","removeCallback","removeGeometryAttributes","hyperleafletGeometryHandler","_ref","_ref$addCallback","_ref$removeCallback","addNoteListToHyperleaflet","nodes","forEach","nodeType","matches","console","error","row","popup","tooltip","parsedGeometry","_extends","options","marker","bindPopup","bindTooltip","setGeometryEvents","createPointGeometry","flippedGeometry","GeoJSON","coordsToLatLngs","polyline","createLineGeometry","polygon","createPolygonGeometry","warn","createGeometry","createGeometryFn","set","addNodeToHyperleaflet","addTo","removeNodeListToHyperleaflet","deleteNodeFromHyperleaflet","get","_deleteNodeFromHyperl","remove","whenReady","querySelectorAll","MutationObserver","mutations","mutation","addedNodes","removedNodes","observe","childList","subtree","attributeFilter","hyperleafletDataToMap","mapContainer","mapElement","_center$split","center","_mapElement$dataset","zoom","mapView","split","setView","leafletMap","e","latlng","getZoom","getCenter","bbox","getBounds","createHyperleafletMap","_createHyperleafletTi","tileLayerElementNodeList","tileLayerElementList","Array","from","hyperleafletTiles","tileLayerElement","tile","_tileLayerElement$dat","maxZoom","currentTile","TILE_LAYERS","minZoom","name","Object","keys","join","filter","Boolean","defaultHyperleafletTile","defaultTileLayerElement","find","t","length","getDefaultHyperleafletTile","tileController","control","layers","fromEntries","createHyperleafletTiles","createMap","addGeoJsonToMap","geoJSON","leafletGeoJSON"],"mappings":"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"}