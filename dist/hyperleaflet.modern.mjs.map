{"version":3,"file":"hyperleaflet.modern.mjs","sources":["../src/geometryStrategy.js","../src/events.js","../src/constants.js","../src/hyperleaflet.js","../src/map.js","../src/hyperleafletHandlers.js","../src/geometry.js"],"sourcesContent":["const debugMode = document.createElement('script');\ndebugMode.type = 'application/json';\ndebugMode.innerText = '{}';\ndocument.body.appendChild(debugMode);\nexport const debugObject = JSON.parse(debugMode.text);\n\n// TODO implement strategy\nexport default function GeometryStrategy() {\n  function addToDebugObject(rowId, geometry, geometryType) {\n    debugObject[rowId] = { type: geometryType, coordinates: JSON.parse(geometry) };\n    debugMode.text = JSON.stringify(debugObject, null, 2);\n  }\n\n  function deleteFromDebugObject(rowId) {\n    delete debugObject[rowId];\n    debugMode.text = JSON.stringify(debugObject, null, 2);\n  }\n  function saveDebugObject() {\n    debugMode.text = JSON.stringify(debugObject, null, 2);\n  }\n  return { addToDebugObject, deleteFromDebugObject, saveDebugObject };\n}\n","export default function initMapEvents(map) {\n  map.on('click', (e) => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('mapclick', { detail: { point: e.latlng } });\n    elem.dispatchEvent(event);\n  });\n\n  map.on('zoomend', () => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('mapzoom', { detail: { zoom: map.getZoom() } });\n    elem.dispatchEvent(event);\n  });\n\n  map.on('move', () => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('mapmove', { detail: { bbox: map.getBounds(), center: map.getCenter() } });\n    elem.dispatchEvent(event);\n  });\n}\n\nexport function setGeometryEvents(geometry, id) {\n  geometry.on('click', (e) => {\n    const elem = document.getElementById('map');\n    const event = new CustomEvent('pointclick', { detail: { point: e.latlng, rowId: id } });\n    elem.dispatchEvent(event);\n  });\n}","import L from 'leaflet';\n\nconst TILE_LAYERS = {\n  OpenStreetMap: L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n  }),\n  EsriWorldImagery: L.tileLayer(\n    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n    {\n      attribution:\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n    },\n  ),\n};\n\nexport default TILE_LAYERS;\n","import L from 'leaflet';\nimport GeometryStrategy from './geometryStrategy';\nimport LeafletWrapper from './hyperleafletHandlers';\nimport createLeafletMap from './map';\n\nconst hyperleaflet = (function hyperleaflet() {\n  if (typeof L === 'undefined') {\n    // eslint-disable-next-line no-console\n    console.error('Hyperleaf can not access Leaflet');\n    return undefined;\n  }\n\n  const map = createLeafletMap();\n  const hyperleafletContainer = document.querySelector('[hyperleaflet]');\n\n  const { addNodeToHyperleaf, deleteNodeFromHyperleaflet } = LeafletWrapper(map);\n  const { addToDebugObject, deleteFromDebugObject, saveDebugObject } = GeometryStrategy();\n\n  // TODO implement strategy\n\n  map.whenReady(() => {\n    hyperleafletContainer.querySelectorAll('[data-id]').forEach((node) => {\n      const [rowId, geometry, geometryType] = addNodeToHyperleaf(node);\n      if (rowId) {\n        addToDebugObject(rowId, geometry, geometryType);\n      }\n      saveDebugObject();\n    });\n  });\n\n  function callback(mutations) {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        mutation.addedNodes.forEach((node) => {\n          if (node.nodeType === 1 && node.matches('[data-id]')) {\n            const [rowId, geometry, geometryType] = addNodeToHyperleaf(node);\n            if (rowId) {\n              addToDebugObject(rowId, geometry, geometryType);\n            }\n          }\n        });\n        mutation.removedNodes.forEach((node) => {\n          if (node.nodeType === 1 && node.matches('[data-id]')) {\n            const rowId = deleteNodeFromHyperleaflet(node);\n            deleteFromDebugObject(rowId);\n          }\n        });\n      }\n    });\n    saveDebugObject();\n  }\n\n  const observer = new MutationObserver(callback);\n\n  observer.observe(hyperleafletContainer, {\n    childList: true, // observe direct children\n    subtree: true, // and lower descendants too\n    attributeFilter: ['data-id'],\n  });\n\n  const addGeoJsonToMap = (geoJson) => {\n    L.geoJSON(geoJson).addTo(map);\n  };\n\n  return { map, addGeoJsonToMap };\n})();\n\nexport default hyperleaflet;\n","import L from 'leaflet';\nimport TILE_LAYERS from './constants';\nimport initEvents from './events';\n\nconst createLeafletMap = () => {\n  const mapDiv = document.querySelector('#map');\n  const tileLayerDivs = mapDiv.querySelectorAll('[data-tile]');\n\n  const { dataset } = mapDiv;\n\n  const mapAttr = {\n    center: dataset?.center.split(',') || [0, 0],\n    zoom: dataset?.zoom || 1,\n    tile: TILE_LAYERS.OpenStreetMap,\n    tiles: {},\n  };\n\n  tileLayerDivs.forEach((tileLayer) => {\n    const { dataset: tileLayerDataset } = tileLayer;\n    const tileLayerName = tileLayerDataset.tile;\n\n    if (tileLayerName in TILE_LAYERS) {\n      const currentTile = TILE_LAYERS[tileLayerName];\n      currentTile.options.minZoom = tileLayerDataset.minZoom;\n      currentTile.options.maxZoom = tileLayerDataset.maxZoom;\n      mapAttr.tiles[tileLayerName] = currentTile;\n\n      if ('default' in tileLayerDataset) {\n        mapAttr.tile = currentTile;\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.error(`${tileLayerName} is not in: \\n${Object.keys(TILE_LAYERS).join('\\n')}`);\n    }\n  });\n\n  const map = L.map(mapDiv).setView(mapAttr.center, mapAttr.zoom);\n\n  if (Object.keys(mapAttr.tiles).length) {\n    L.control.layers(mapAttr.tiles).addTo(map);\n  }\n\n  initEvents(map);\n\n  mapAttr.tile.addTo(map);\n  return map;\n};\n\nexport default createLeafletMap;\n","import createLeafletObject from './geometry';\n\nexport default function LeafletWrapper(map) {\n  const leafletObjects = {};\n\n  const proxy = new Proxy(leafletObjects, {\n    set(target, id, row) {\n      if (id in target) {\n        // eslint-disable-next-line no-console\n        console.error(`${id} already exists`);\n        return false;\n      }\n\n      const leafletObject = createLeafletObject(row);\n\n      if (leafletObject) {\n        leafletObject.addTo(map);\n        target[id] = leafletObject;\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(`Geometry with ${id} can not be created`);\n      }\n      return true;\n    },\n    deleteProperty(target, id) {\n      target[id].remove();\n      delete target[id];\n      return true;\n    },\n  });\n\n  function addNodeToHyperleaf(node) {\n    const { dataset: data } = node;\n    const rowId = data.id;\n    proxy[rowId] = { ...data };\n    return [rowId, data.geometry, data.geometryType];\n  }\n  function deleteNodeFromHyperleaflet(node) {\n    const rowId = node.dataset.id;\n    delete proxy[rowId];\n    return rowId;\n  }\n  return { addNodeToHyperleaf, deleteNodeFromHyperleaflet };\n}\n","import L from 'leaflet';\nimport { setGeometryEvents } from './events';\n\nexport default function createLeafletObject(row) {\n  const { geometry, popup, tooltip, geometryType, id } = row;\n  const parsedGeometry = JSON.parse(geometry);\n\n  switch (geometryType) {\n    case 'Point': {\n      const marker = L.marker(parsedGeometry);\n      if (popup) {\n        marker.bindPopup(popup);\n      }\n      if (tooltip) {\n        marker.bindTooltip(tooltip);\n      }\n      setGeometryEvents(marker, id);\n      return marker;\n    }\n    case 'LineString': {\n      const flippedGeometry = L.GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n      const line = L.polyline(flippedGeometry);\n      if (popup) {\n        line.bindPopup(popup);\n      }\n      if (tooltip) {\n        line.bindTooltip(tooltip);\n      }\n      setGeometryEvents(line, id);\n      return line;\n    }\n    case 'Polygon': {\n      const flippedGeometry = L.GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n      const polygon = L.polygon(flippedGeometry);\n      if (popup) {\n        polygon.bindPopup(popup);\n      }\n      if (tooltip) {\n        polygon.bindTooltip(tooltip);\n      }\n      setGeometryEvents(polygon, id);\n      return polygon;\n    }\n    default: {\n      // eslint-disable-next-line no-console\n      console.warn(`${geometryType} is not supported`);\n      return null;\n    }\n  }\n}\n"],"names":["debugMode","document","createElement","type","innerText","body","appendChild","JSON","parse","text","setGeometryEvents","geometry","id","on","e","elem","getElementById","event","CustomEvent","detail","point","latlng","rowId","dispatchEvent","TILE_LAYERS","OpenStreetMap","L","tileLayer","attribution","EsriWorldImagery","console","error","map","mapDiv","querySelector","tileLayerDivs","querySelectorAll","dataset","mapAttr","center","split","zoom","tile","tiles","forEach","tileLayerDataset","tileLayerName","currentTile","options","minZoom","maxZoom","Object","keys","join","setView","length","control","layers","addTo","getZoom","bbox","getBounds","getCenter","initEvents","createLeafletMap","addNodeToHyperleaf","deleteNodeFromHyperleaflet","LeafletWrapper","proxy","Proxy","set","target","row","leafletObject","createLeafletObject","popup","tooltip","geometryType","parsedGeometry","marker","bindPopup","bindTooltip","flippedGeometry","GeoJSON","coordsToLatLngs","line","polyline","polygon","warn","deleteProperty","remove","node","data","_extends","addToDebugObject","deleteFromDebugObject","saveDebugObject","debugObject","coordinates","stringify","whenReady","hyperleafletContainer","mutations","mutation","addedNodes","nodeType","matches","removedNodes","observe","childList","subtree","attributeFilter","addGeoJsonToMap","geoJson","geoJSON"],"mappings":"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"}