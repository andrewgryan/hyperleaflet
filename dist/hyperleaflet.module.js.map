{"version":3,"file":"hyperleaflet.module.js","sources":["../src/Map/tiles.js","../src/Map/events.js","../src/Map/map-utils.js","../src/Map/index.js","../src/Geometry/geometry-debugger.js","../src/Geometry/utils.js","../src/Geometry/events.js","../src/Geometry/leaflet-geometry.js","../src/Geometry/hyperleaflet-geometry-handler.js","../src/Geometry/index.js","../src/hyperleaflet.js"],"sourcesContent":["import { tileLayer } from 'leaflet';\n\nconst TILE_LAYERS = {\n  OpenStreetMap: tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n  }),\n  EsriWorldImagery: tileLayer(\n    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n    {\n      attribution:\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n    },\n  ),\n};\n\nexport default TILE_LAYERS;\n","export default function setMapEvents(map) {\n  map.on('click', (e) => {\n    const event = new CustomEvent('mapclick', { detail: { point: e.latlng } });\n    window.dispatchEvent(event);\n  });\n\n  map.on('zoomend', () => {\n    const event = new CustomEvent('mapzoom', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: map.getBounds() },\n    });\n    window.dispatchEvent(event);\n  });\n\n  map.on('move', () => {\n    const event = new CustomEvent('mapmove', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: map.getBounds() },\n    });\n    window.dispatchEvent(event);\n  });\n\n  return map;\n}\n","import { map, control } from 'leaflet';\nimport TILE_LAYERS from './tiles';\nimport setMapEvents from './events';\n\nexport function getDefaultHyperleafletTile(tileLayerElementList) {\n  const defaultTileLayerElement = tileLayerElementList.find((t) => 'defaultTile' in t.dataset);\n  if (defaultTileLayerElement) {\n    return TILE_LAYERS[defaultTileLayerElement.dataset.tile];\n  }\n  if (tileLayerElementList.length) {\n    return TILE_LAYERS[tileLayerElementList[0].dataset.tile];\n  }\n  return TILE_LAYERS.OpenStreetMap;\n}\n\nexport function createHyperleafletTiles(tileLayerElementNodeList) {\n  const tileLayerElementList = Array.from(tileLayerElementNodeList);\n  const hyperleafletTiles = tileLayerElementList\n    .map((tileLayerElement) => {\n      const { tile, minZoom, maxZoom } = tileLayerElement.dataset;\n\n      const currentTile = TILE_LAYERS[tile];\n      if (!currentTile) {\n        // eslint-disable-next-line no-console\n        console.warn(`${tile} is not in: \\n${Object.keys(TILE_LAYERS).join('\\n')}`);\n        return null;\n      }\n      currentTile.options.minZoom = minZoom;\n      currentTile.options.maxZoom = maxZoom;\n      currentTile.name = tile;\n      return { tile: currentTile };\n    })\n    .filter(Boolean);\n  const defaultHyperleafletTile = getDefaultHyperleafletTile(tileLayerElementList);\n  return {\n    defaultHyperleafletTile,\n    tileController: hyperleafletTiles.length\n      ? control.layers(Object.fromEntries(hyperleafletTiles.map((t) => [t.tile.name, t.tile])))\n      : null,\n  };\n}\n\nexport default function createHyperleafletMap(mapElement) {\n  const { center, zoom } = mapElement.dataset;\n\n  const mapView = {\n    center: center?.split(',') ?? [0, 0],\n    zoom: zoom || 1,\n  };\n  const leafletMap = map(mapElement).setView(mapView.center, mapView.zoom);\n  return setMapEvents(leafletMap);\n}\n","import createHyperleafletMap, { createHyperleafletTiles } from './map-utils';\n\n/**\n *Creates a map\n * @returns {L.Map}\n */\nfunction createMap() {\n  const mapContainer = document.querySelector('#map');\n  const map = createHyperleafletMap(mapContainer);\n\n  const tileLayerElementList = mapContainer.querySelectorAll('[data-tile]');\n  const { defaultHyperleafletTile, tileController } = createHyperleafletTiles(tileLayerElementList);\n\n  if (tileController) {\n    tileController.addTo(map);\n  }\n  defaultHyperleafletTile.addTo(map);\n  return map;\n}\n\nexport default createMap;\n","const debugMode = document.createElement('script');\ndebugMode.type = 'application/json';\ndebugMode.setAttribute('data-testid', 'debug');\ndebugMode.innerText = '{}';\ndocument.body.appendChild(debugMode);\n\nconst debugObject = JSON.parse(debugMode.text);\nexport function addToDebug(node) {\n  const { id, geometry, geometryType } = node.dataset;\n  node.removeAttribute('data-geometry');\n  debugObject[id] = { type: geometryType, coordinates: JSON.parse(geometry) };\n  debugMode.text = JSON.stringify(debugObject, null, 2);\n}\n\nexport function deleteFromDebug(node) {\n  const { id } = node.dataset;\n  delete debugObject[id];\n  debugMode.text = JSON.stringify(debugObject, null, 2);\n}\n","export default function utils(node) {\n  node.removeAttribute('data-geometry');\n}\n","export default function setGeometryEvents(leafletObject, id) {\n  leafletObject.on('click', () => {\n    const event = new CustomEvent('pointclick', { detail: { point: leafletObject.getLatLng(), rowId: id } });\n    window.dispatchEvent(event);\n  });\n}\n","import { marker, polyline, polygon, GeoJSON } from 'leaflet';\nimport setGeometryEvents from './events';\n\nconst createPointGeometry = (parsedGeometry, options) => {\n  const geometry = marker(parsedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createLineGeometry = (parsedGeometry, options) => {\n  const flippedGeometry = GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n  const geometry = polyline(flippedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createPolygonGeometry = (parsedGeometry, options) => {\n  const flippedGeometry = GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n  const geometry = polygon(flippedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createGeometry = (geometryType) => (parsedGeometry, options) => {\n  switch (geometryType) {\n    case 'Point':\n      return createPointGeometry(parsedGeometry, options);\n    case 'LineString':\n      return createLineGeometry(parsedGeometry, options);\n    case 'Polygon':\n      return createPolygonGeometry(parsedGeometry, options);\n    default:\n      // eslint-disable-next-line no-console\n      console.warn(`${geometryType} is not supported`);\n      return null;\n  }\n};\n\nexport default function createLeafletObject(row) {\n  const { geometry, popup, tooltip, geometryType, id } = row;\n  const parsedGeometry = JSON.parse(geometry);\n\n  const createGeometryFn = createGeometry(geometryType);\n  return createGeometryFn(parsedGeometry, { popup, tooltip, id });\n}\n","import createLeafletObject from './leaflet-geometry';\n\nconst leafletObjectMap = new Map();\n\n/**\n * Creates a new leaflet object and adds it to the leaflet object map with the given row ID.\n * @param {HTMLElement} node - The HTML element containing the row ID in its dataset.\n * @returns {Array} An array containing the newly created leaflet object.\n */\nfunction addNodeToHyperleaflet(node) {\n  const { dataset } = node;\n  const rowId = dataset.id;\n\n  if (rowId in leafletObjectMap) {\n    // eslint-disable-next-line no-console\n    console.error(`%c${rowId}`, 'color:red', 'already exists', node);\n    return [];\n  }\n\n  const leafletObject = createLeafletObject({ ...dataset });\n  leafletObjectMap.set(rowId, leafletObject);\n\n  return [leafletObject];\n}\n/**\n * Removes the leaflet object associated with the given HTML element from the leaflet object map.\n * @param {HTMLElement} node - The HTML element containing the row ID in its dataset.\n * @returns {Array} An array containing the removed leaflet object.\n */\nfunction deleteNodeFromHyperleaflet(node) {\n  const rowId = node.dataset.id;\n  const leafletObject = leafletObjectMap.get(rowId);\n  leafletObjectMap.delete(rowId);\n  return [leafletObject];\n}\n\n/**\n * Initializes the hyperleaflet geometry handler with the given map and callbacks.\n * @param {Object} map - The leaflet map instance to be used.\n * @param {Object} callbacks - An object containing the add and remove callbacks to be called when elements are added or removed from the map.\n * @param {Function} callbacks.addCallback - The function to be called when an element is added to the map.\n * @param {Function} callbacks.removeCallback - The function to be called when an element is removed from the map.\n * @returns {Object} An object containing the addNoteListToHyperleaflet and removeNodeListToHyperleaflet functions.\n */\nexport default function hyperleafletGeometryHandler(map, { addCallback = () => {}, removeCallback = () => {} }) {\n  /**\n   * Adds a list of nodes to the map as Leaflet objects.\n   * @param {Array} nodes - An array of nodes to be added to the map.\n   */\n  const addNoteListToHyperleaflet = (nodes) => {\n    nodes.forEach((node) => {\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\n        const [leafletObject] = addNodeToHyperleaflet(node);\n        leafletObject.addTo(map);\n        addCallback(node);\n      }\n    });\n  };\n\n  /**\n   * Removes a list of nodes from the map.\n   * @param {Array} nodes - An array of nodes to be removed from the map.\n   */\n  function removeNodeListToHyperleaflet(nodes) {\n    nodes.forEach((node) => {\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\n        const [leafletObject] = deleteNodeFromHyperleaflet(node);\n        leafletObject.remove();\n        removeCallback(node);\n      }\n    });\n  }\n\n  return { addNoteListToHyperleaflet, removeNodeListToHyperleaflet };\n}\n","import { addToDebug, deleteFromDebug } from './geometry-debugger';\nimport removeGeometryAttributes from './utils';\nimport hyperleafletGeometryHandler from './hyperleaflet-geometry-handler';\n\n/**\n * Adds the data from the hyperleaflet container to the map.\n @param {L.Map} map\n @param map\n */\n\nfunction hyperleafletDataToMap(map) {\n  const hyperleafletDataContainer = document.querySelector('[hyperleaflet]');\n\n  if (!hyperleafletDataContainer) return;\n\n  const geometryDisplayStrategy = hyperleafletDataContainer.dataset.geometryDisplay || 'object';\n\n  let callbackFunctions = {};\n  if (geometryDisplayStrategy === 'object') {\n    callbackFunctions = {\n      addCallback: addToDebug,\n      removeCallback: deleteFromDebug,\n    };\n  } else if (geometryDisplayStrategy === 'remove') {\n    callbackFunctions = {\n      addCallback: removeGeometryAttributes,\n      removeCallback: () => {},\n    };\n  }\n\n  const { addNoteListToHyperleaflet, removeNodeListToHyperleaflet } = hyperleafletGeometryHandler(\n    map,\n    callbackFunctions,\n  );\n\n  map.whenReady(() => {\n    const nodes = hyperleafletDataContainer.querySelectorAll('[data-id]');\n    addNoteListToHyperleaflet(nodes);\n  });\n\n  function callback(mutations) {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        addNoteListToHyperleaflet(mutation.addedNodes);\n        removeNodeListToHyperleaflet(mutation.removedNodes);\n      }\n    });\n  }\n\n  const observer = new MutationObserver(callback);\n\n  observer.observe(hyperleafletDataContainer, {\n    childList: true, // observe direct children\n    subtree: true, // and lower descendants too\n    attributeFilter: ['data-id'],\n  });\n}\n\nexport default hyperleafletDataToMap;\n","import { geoJSON as leafletGeoJSON } from 'leaflet';\n\nimport createMap from './Map';\nimport hyperleafletDataToMap from './Geometry';\n\nconst hyperleaflet = (function hyperleaflet() {\n  const map = createMap();\n  hyperleafletDataToMap(map);\n\n  // TODO - move this to a separate file\n  /**\n   Adds a GeoJSON object to the map.\n   @param {Object} geoJSON - The GeoJSON object to add to the map.\n   @returns {void}\n   */\n  const addGeoJsonToMap = (geoJSON) => {\n    leafletGeoJSON(geoJSON).addTo(map);\n  };\n\n  return { map, addGeoJsonToMap };\n})();\n\nexport default hyperleaflet;\n"],"names":["TILE_LAYERS","OpenStreetMap","tileLayer","attribution","EsriWorldImagery","setMapEvents","map","on","e","event","CustomEvent","detail","point","latlng","window","dispatchEvent","zoom","getZoom","center","getCenter","bbox","getBounds","getDefaultHyperleafletTile","tileLayerElementList","defaultTileLayerElement","find","t","dataset","tile","length","createHyperleafletTiles","tileLayerElementNodeList","Array","from","hyperleafletTiles","tileLayerElement","minZoom","maxZoom","currentTile","console","warn","Object","keys","join","options","name","filter","Boolean","defaultHyperleafletTile","tileController","control","layers","fromEntries","createHyperleafletMap","mapElement","mapView","split","leafletMap","setView","createMap","mapContainer","document","querySelector","querySelectorAll","addTo","debugMode","createElement","type","setAttribute","innerText","body","appendChild","debugObject","JSON","parse","text","addToDebug","node","id","geometry","geometryType","removeAttribute","coordinates","stringify","deleteFromDebug","utils","setGeometryEvents","leafletObject","getLatLng","rowId","createPointGeometry","parsedGeometry","marker","popup","bindPopup","tooltip","bindTooltip","createLineGeometry","flippedGeometry","GeoJSON","coordsToLatLngs","polyline","createPolygonGeometry","polygon","createGeometry","createLeafletObject","row","createGeometryFn","leafletObjectMap","Map","addNodeToHyperleaflet","error","set","deleteNodeFromHyperleaflet","get","hyperleafletGeometryHandler","addCallback","removeCallback","addNoteListToHyperleaflet","nodes","forEach","nodeType","matches","removeNodeListToHyperleaflet","remove","hyperleafletDataToMap","hyperleafletDataContainer","geometryDisplayStrategy","geometryDisplay","callbackFunctions","removeGeometryAttributes","whenReady","callback","mutations","mutation","addedNodes","removedNodes","observer","MutationObserver","observe","childList","subtree","attributeFilter","hyperleaflet","addGeoJsonToMap","geoJSON","leafletGeoJSON"],"mappings":"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"}