{"version":3,"file":"hyperleaflet.module.js","sources":["../src/Map/tiles.js","../src/Map/map-utils.js","../src/Map/events.js","../src/Geometry/geometry-debugger.js","../src/Geometry/utils.js","../src/Geometry/events.js","../src/Geometry/leaflet-geometry.js","../src/Geometry/hyperleaflet-geometry-handler.js","../src/hyperleaflet.js","../src/Map/index.js","../src/Geometry/index.js"],"sourcesContent":["import { tileLayer } from 'leaflet';\n\nconst TILE_LAYERS = {\n  OpenStreetMap: tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n  }),\n  EsriWorldImagery: tileLayer(\n    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n    {\n      attribution:\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n    },\n  ),\n};\n\nexport default TILE_LAYERS;\n","import { map, control } from 'leaflet';\nimport TILE_LAYERS from './tiles';\nimport setMapEvents from './events';\n\nexport function getDefaultHyperleafletTile(tileLayerElementList) {\n  const defaultTileLayerElement = tileLayerElementList.find((t) => 'defaultTile' in t.dataset);\n  if (defaultTileLayerElement) {\n    return TILE_LAYERS[defaultTileLayerElement.dataset.tile];\n  }\n  if (tileLayerElementList.length) {\n    return TILE_LAYERS[tileLayerElementList[0].dataset.tile];\n  }\n  return TILE_LAYERS.OpenStreetMap;\n}\n\nexport function createHyperleafletTiles(tileLayerElementNodeList) {\n  const tileLayerElementList = Array.from(tileLayerElementNodeList);\n  const hyperleafletTiles = tileLayerElementList\n    .map((tileLayerElement) => {\n      const { tile, minZoom, maxZoom } = tileLayerElement.dataset;\n\n      const currentTile = TILE_LAYERS[tile];\n      if (!currentTile) {\n        // eslint-disable-next-line no-console\n        console.warn(`${tile} is not in: \\n${Object.keys(TILE_LAYERS).join('\\n')}`);\n        return null;\n      }\n      currentTile.options.minZoom = minZoom;\n      currentTile.options.maxZoom = maxZoom;\n      currentTile.name = tile;\n      return { tile: currentTile };\n    })\n    .filter(Boolean);\n  const defaultHyperleafletTile = getDefaultHyperleafletTile(tileLayerElementList);\n  return {\n    defaultHyperleafletTile,\n    tileController: hyperleafletTiles.length\n      ? control.layers(Object.fromEntries(hyperleafletTiles.map((t) => [t.tile.name, t.tile])))\n      : null,\n  };\n}\n\nexport default function createHyperleafletMap(mapElement) {\n  const { center, zoom } = mapElement.dataset;\n\n  const mapView = {\n    center: center?.split(',') ?? [0, 0],\n    zoom: zoom || 1,\n  };\n  const leafletMap = map(mapElement).setView(mapView.center, mapView.zoom);\n  return setMapEvents(leafletMap);\n}\n","export default function setMapEvents(map) {\n  map.on('click', (e) => {\n    const event = new CustomEvent('mapclick', { detail: { point: e.latlng } });\n    window.dispatchEvent(event);\n  });\n\n  map.on('zoomend', () => {\n    const event = new CustomEvent('mapzoom', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: map.getBounds() },\n    });\n    window.dispatchEvent(event);\n  });\n\n  map.on('move', () => {\n    const event = new CustomEvent('mapmove', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: map.getBounds() },\n    });\n    window.dispatchEvent(event);\n  });\n\n  return map;\n}\n","const debugMode = document.createElement('script');\ndebugMode.type = 'application/json';\ndebugMode.setAttribute('data-testid', 'debug');\ndebugMode.innerText = '{}';\ndocument.body.appendChild(debugMode);\n\nconst debugObject = JSON.parse(debugMode.text);\nexport function addToDebug(node) {\n  const { id, geometry, geometryType } = node.dataset;\n  node.removeAttribute('data-geometry');\n  debugObject[id] = { type: geometryType, coordinates: JSON.parse(geometry) };\n  debugMode.text = JSON.stringify(debugObject, null, 2);\n}\n\nexport function deleteFromDebug(node) {\n  const { id } = node.dataset;\n  delete debugObject[id];\n  debugMode.text = JSON.stringify(debugObject, null, 2);\n}\n","export default function utils(node) {\n  node.removeAttribute('data-geometry');\n}\n","export default function setGeometryEvents(leafletObject, id) {\n  leafletObject.on('click', () => {\n    const event = new CustomEvent('pointclick', { detail: { point: leafletObject.getLatLng(), rowId: id } });\n    window.dispatchEvent(event);\n  });\n}\n","import { marker, polyline, polygon, GeoJSON } from 'leaflet';\nimport setGeometryEvents from './events';\n\nconst createPointGeometry = (parsedGeometry, options) => {\n  const geometry = marker(parsedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createLineGeometry = (parsedGeometry, options) => {\n  const flippedGeometry = GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n  const geometry = polyline(flippedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createPolygonGeometry = (parsedGeometry, options) => {\n  const flippedGeometry = GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n  const geometry = polygon(flippedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createGeometry = (geometryType) => (parsedGeometry, options) => {\n  switch (geometryType) {\n    case 'Point':\n      return createPointGeometry(parsedGeometry, options);\n    case 'LineString':\n      return createLineGeometry(parsedGeometry, options);\n    case 'Polygon':\n      return createPolygonGeometry(parsedGeometry, options);\n    default:\n      // eslint-disable-next-line no-console\n      console.warn(`${geometryType} is not supported`);\n      return null;\n  }\n};\n\nexport default function createLeafletObject(row) {\n  const { geometry, popup, tooltip, geometryType, id } = row;\n  const parsedGeometry = JSON.parse(geometry);\n\n  const createGeometryFn = createGeometry(geometryType);\n  return createGeometryFn(parsedGeometry, { popup, tooltip, id });\n}\n","import createLeafletObject from './leaflet-geometry';\r\n\r\nconst leafletObjectMap = new Map();\r\n\r\nfunction addNodeToHyperleaflet(node) {\r\n  const { dataset } = node;\r\n  const rowId = dataset.id;\r\n\r\n  if (rowId in leafletObjectMap) {\r\n    // eslint-disable-next-line no-console\r\n    console.error(`%c${rowId}`, 'color:red', 'already exists', node);\r\n    return [];\r\n  }\r\n\r\n  const leafletObject = createLeafletObject({ ...dataset });\r\n  leafletObjectMap.set(rowId, leafletObject);\r\n\r\n  return [leafletObject];\r\n}\r\n\r\nfunction deleteNodeFromHyperleaflet(node) {\r\n  const rowId = node.dataset.id;\r\n  const leafletObject = leafletObjectMap.get(rowId);\r\n  leafletObjectMap.delete(rowId);\r\n  return [leafletObject];\r\n}\r\n\r\nexport default function hyperleafletGeometryHandler(map, { addCallback = () => {}, removeCallback = () => {} }) {\r\n  const addNoteListToHyperleaflet = (nodes) => {\r\n    nodes.forEach((node) => {\r\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\r\n        const [leafletObject] = addNodeToHyperleaflet(node);\r\n        leafletObject.addTo(map);\r\n        addCallback(node);\r\n      }\r\n    });\r\n  };\r\n\r\n  function removeNodeListToHyperleaflet(nodes) {\r\n    nodes.forEach((node) => {\r\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\r\n        const [leafletObject] = deleteNodeFromHyperleaflet(node);\r\n        leafletObject.remove();\r\n        removeCallback(node);\r\n      }\r\n    });\r\n  }\r\n\r\n  return { addNoteListToHyperleaflet, removeNodeListToHyperleaflet };\r\n}\r\n","import { geoJSON as leafletGeoJSON } from 'leaflet';\n\nimport createMap from './Map';\nimport hyperleafletDataToMap from './Geometry';\n\nconst hyperleaflet = (function hyperleaflet() {\n  const map = createMap();\n  hyperleafletDataToMap(map);\n\n  // TODO - move this to a separate file\n  /**\n   Adds a GeoJSON object to the map.\n   @param {Object} geoJSON - The GeoJSON object to add to the map.\n   @returns {void}\n   */\n  const addGeoJsonToMap = (geoJSON) => {\n    leafletGeoJSON(geoJSON).addTo(map);\n  };\n\n  return { map, addGeoJsonToMap };\n})();\n\nexport default hyperleaflet;\n","import createHyperleafletMap, { createHyperleafletTiles } from './map-utils';\n\n/**\n *Creates a map\n * @returns {L.Map}\n */\nfunction createMap() {\n  const mapContainer = document.querySelector('#map');\n  const map = createHyperleafletMap(mapContainer);\n\n  const tileLayerElementList = mapContainer.querySelectorAll('[data-tile]');\n  const { defaultHyperleafletTile, tileController } = createHyperleafletTiles(tileLayerElementList);\n\n  if (tileController) {\n    tileController.addTo(map);\n  }\n  defaultHyperleafletTile.addTo(map);\n  return map;\n}\n\nexport default createMap;\n","import { addToDebug, deleteFromDebug } from './geometry-debugger';\nimport removeGeometryAttributes from './utils';\nimport hyperleafletGeometryHandler from './hyperleaflet-geometry-handler';\n\n/**\n * Adds the data from the hyperleaflet container to the map.\n @param {L.Map} map\n @param map\n */\n\nfunction hyperleafletDataToMap(map) {\n  const hyperleafletDataContainer = document.querySelector('[hyperleaflet]');\n\n  if (!hyperleafletDataContainer) return;\n\n  const geometryDisplayStrategy = hyperleafletDataContainer.dataset.geometryDisplay || 'object';\n\n  let callbackFunctions = {};\n  if (geometryDisplayStrategy === 'object') {\n    callbackFunctions = {\n      addCallback: addToDebug,\n      removeCallback: deleteFromDebug,\n    };\n  } else if (geometryDisplayStrategy === 'remove') {\n    callbackFunctions = {\n      addCallback: removeGeometryAttributes,\n      removeCallback: () => {},\n    };\n  }\n\n  const { addNoteListToHyperleaflet, removeNodeListToHyperleaflet } = hyperleafletGeometryHandler(\n    map,\n    callbackFunctions,\n  );\n\n  map.whenReady(() => {\n    const nodes = hyperleafletDataContainer.querySelectorAll('[data-id]');\n    addNoteListToHyperleaflet(nodes);\n  });\n\n  function callback(mutations) {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        addNoteListToHyperleaflet(mutation.addedNodes);\n        removeNodeListToHyperleaflet(mutation.removedNodes);\n      }\n    });\n  }\n\n  const observer = new MutationObserver(callback);\n\n  observer.observe(hyperleafletDataContainer, {\n    childList: true, // observe direct children\n    subtree: true, // and lower descendants too\n    attributeFilter: ['data-id'],\n  });\n}\n\nexport default hyperleafletDataToMap;\n"],"names":["OpenStreetMap","tileLayer","attribution","EsriWorldImagery","createHyperleafletMap","mapElement","_center$split","dataset","center","_mapElement$dataset","zoom","mapView","split","setMapEvents","map","on","e","event","CustomEvent","detail","point","latlng","window","dispatchEvent","getZoom","getCenter","bbox","getBounds","setView","debugMode","document","createElement","type","setAttribute","innerText","body","appendChild","debugObject","JSON","parse","text","node","id","geometry","geometryType","_node$dataset","removeAttribute","coordinates","stringify","deleteFromDebug","utils","leafletObject","getLatLng","rowId","leafletObjectMap","Map","hyperleaflet","mapContainer","querySelector","_createHyperleafletTi","tileLayerElementNodeList","tileLayerElementList","Array","from","hyperleafletTiles","tileLayerElement","tile","_tileLayerElement$dat","maxZoom","currentTile","TILE_LAYERS","options","minZoom","name","console","warn","Object","keys","join","filter","Boolean","defaultHyperleafletTile","defaultTileLayerElement","find","t","length","getDefaultHyperleafletTile","tileController","control","layers","fromEntries","createHyperleafletTiles","querySelectorAll","addTo","createMap","hyperleafletDataContainer","geometryDisplayStrategy","geometryDisplay","callbackFunctions","addCallback","addToDebug","removeCallback","removeGeometryAttributes","hyperleafletGeometryHandler","_ref","_ref$addCallback","_ref$removeCallback","addNoteListToHyperleaflet","nodes","forEach","nodeType","matches","error","row","popup","tooltip","parsedGeometry","_extends","marker","bindPopup","bindTooltip","setGeometryEvents","createPointGeometry","flippedGeometry","GeoJSON","coordsToLatLngs","polyline","createLineGeometry","polygon","createPolygonGeometry","createGeometry","createGeometryFn","set","addNodeToHyperleaflet","removeNodeListToHyperleaflet","deleteNodeFromHyperleaflet","get","_deleteNodeFromHyperl","remove","whenReady","MutationObserver","mutations","mutation","addedNodes","removedNodes","observe","childList","subtree","attributeFilter","hyperleafletDataToMap","addGeoJsonToMap","geoJSON","leafletGeoJSON"],"mappings":"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"}